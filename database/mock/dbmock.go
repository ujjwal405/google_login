// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ujjwal405/google_login/database (interfaces: AllDatabase)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ujjwal405/google_login/models"
)

// MockAllDatabase is a mock of AllDatabase interface.
type MockAllDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockAllDatabaseMockRecorder
}

// MockAllDatabaseMockRecorder is the mock recorder for MockAllDatabase.
type MockAllDatabaseMockRecorder struct {
	mock *MockAllDatabase
}

// NewMockAllDatabase creates a new mock instance.
func NewMockAllDatabase(ctrl *gomock.Controller) *MockAllDatabase {
	mock := &MockAllDatabase{ctrl: ctrl}
	mock.recorder = &MockAllDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllDatabase) EXPECT() *MockAllDatabaseMockRecorder {
	return m.recorder
}

// DBCheckEmail mocks base method.
func (m *MockAllDatabase) DBCheckEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBCheckEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBCheckEmail indicates an expected call of DBCheckEmail.
func (mr *MockAllDatabaseMockRecorder) DBCheckEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBCheckEmail", reflect.TypeOf((*MockAllDatabase)(nil).DBCheckEmail), arg0)
}

// DBGetData mocks base method.
func (m *MockAllDatabase) DBGetData(arg0 string) (model.UserSignup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBGetData", arg0)
	ret0, _ := ret[0].(model.UserSignup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBGetData indicates an expected call of DBGetData.
func (mr *MockAllDatabaseMockRecorder) DBGetData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBGetData", reflect.TypeOf((*MockAllDatabase)(nil).DBGetData), arg0)
}

// DBSignup mocks base method.
func (m *MockAllDatabase) DBSignup(arg0 model.UserSignup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBSignup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBSignup indicates an expected call of DBSignup.
func (mr *MockAllDatabaseMockRecorder) DBSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBSignup", reflect.TypeOf((*MockAllDatabase)(nil).DBSignup), arg0)
}

// DBUpdate mocks base method.
func (m *MockAllDatabase) DBUpdate(arg0 string, arg1 model.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBUpdate indicates an expected call of DBUpdate.
func (mr *MockAllDatabaseMockRecorder) DBUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBUpdate", reflect.TypeOf((*MockAllDatabase)(nil).DBUpdate), arg0, arg1)
}

// DbData mocks base method.
func (m *MockAllDatabase) DbData(arg0 string) (model.UserSignup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbData", arg0)
	ret0, _ := ret[0].(model.UserSignup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbData indicates an expected call of DbData.
func (mr *MockAllDatabaseMockRecorder) DbData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbData", reflect.TypeOf((*MockAllDatabase)(nil).DbData), arg0)
}
